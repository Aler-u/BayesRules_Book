Para el tercer empleado la funcion de likelihood es $L(\pi|y=20) = \binom{100}{20} \pi^{20}(1-\pi)^{80}$. Cuando unimos ambos en la posterior nos queda un termino $\pi^{20+3} = \pi^{23}$ y el otro termino nos queda $(1-\pi)^{80+2} = (1-\pi)^{82}$.
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1)
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10)
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + labs(title = 'Primer empleado')
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + ggplot2::labs(title = 'Primer empleado')
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100) + ggplot2::labs(title = 'Tercer empleado')
)
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100) + ggplot2::labs(title = 'Tercer empleado'),
ncol = 1
)
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100) + ggplot2::labs(title = 'Tercer empleado'),
ncol = 3
)
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100) + ggplot2::labs(title = 'Tercer empleado')
)
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1, prior = F, likelihood = F) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100) + ggplot2::labs(title = 'Tercer empleado')
)
ggpubr::ggarrange(
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1, prior = F, likelihood = F) + ggplot2::labs(title = 'Primer empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10, prior = F, likelihood = F) + ggplot2::labs(title = 'Segundo empleado'),
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100, prior = F, likelihood = F) + ggplot2::labs(title = 'Tercer empleado')
)
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1, prior = F, likelihood = F) + bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10, prior = F, likelihood = F)
bayesrules::plot_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1, prior = F, likelihood = F)
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3))
library(ggplot2)
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3))
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), fill = 'green')
?stat_function
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), fill = 'green')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), shape = 'green')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'red') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'red') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'blue')
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'red') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'blue') #Tercer empleado
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1)
rbind(
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
)
rbind(
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% select(mean:sd)
rbind(
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% dplyr::select(mean:sd)
library(dplyr)
rbind(
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% select(mean:Sd)
rbind(
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% select(mean:sd)
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1)
select(mean:sd) %>% #Extraemos las columnas relevantes (las que tienen las medidas)
mutate(empleado = c('Primero','Segundo','Tercero')) #Generamos una nueva columna para identificar a que empleado corresponde cada posterior
rbind( #Unimos todos los resumenes en un solo dataframe
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% filter(model == 'posterior') %>% #Nos quedamos unicamente con los resumenes de la posterior
select(mean:sd) %>% #Extraemos las columnas relevantes (las que tienen las medidas)
mutate(empleado = c('Primero','Segundo','Tercero')) #Generamos una nueva columna para identificar a que empleado corresponde cada posterior
rbind( #Unimos todos los resumenes en un solo dataframe
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 0, n = 1),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 3, n = 10),
bayesrules::summarize_beta_binomial(alpha = 4, beta = 3, y = 20, n = 100)
) %>% filter(model == 'posterior') %>% #Nos quedamos unicamente con los resumenes de la posterior
select(mean:sd) %>% #Extraemos las columnas relevantes (las que tienen las medidas)
mutate(empleado = c('Primero','Segundo','Tercero')) #Nueva columna para identificar de que empleado viene la posterior
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'green') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'green2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'green3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'charteuse') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'green2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'green3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'green2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'green3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'chartreuse1') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'chartreuse2') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse1') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'chartreuse2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'chartreuse3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'yellow2') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse1') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'chartreuse2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'chartreuse3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'khaki') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse1') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'chartreuse2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'chartreuse3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'gold1') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 3, shape2 = 3), color = 'chartreuse1') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'chartreuse2') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'chartreuse3') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 4), color = 'green') + #Primer empleado
stat_function(fun = dbeta, args = list(shape1 = 7, shape2 = 10), color = 'red') + #Segundo empleado
stat_function(fun = dbeta, args = list(shape1 = 23, shape2 = 82), color = 'blue') #Tercer empleado
ggplot() +
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 3), color = 'gold1') + #Prior
stat_function(fun = dbeta, args = list(shape1 = 4, shape2 = 4), color = 'chartreuse1') + #Primer dia
stat_function(fun = dbeta, args = list(shape1 = 6, shape2 = 10), color = 'chartreuse2') + #Segundo dia
stat_function(fun = dbeta, args = list(shape1 = 26, shape2 = 90), color = 'chartreuse3') #Tercer dia
ej4.19_df <- bayesrules::bechdel
ej4.19_df %>% filter(year == 1980)
ej.4.19.a <- ej4.19_df %>% filter(year == 1980)
ej.4.19.a %>% nrow()
ej.4.19.a %>% count(binary)
rbind(
ej.4.19.a %>% count(binary),
ej.4.19.a %>% sum(count(binary))
)
ej.4.19.a %>% count(binary)
bayesrules::summarize_beta_binomial(alpha = 1, beta = 1, y = 4, n = 10)
ej4.19_df %>% filter(year == 1990) %>% count(binary)
ej4.19_df %>% filter(year == 1990) %>% count(binary) %>% sum(n)
ej4.19_df %>% filter(year == 1990) %>% count(binary)
bayesrules::summarize_beta_binomial(alpha = 1, beta = 1, y = 4, n = 14)
bayesrules::summarize_beta_binomial(alpha = 5, beta = 11, y = 6, n = 15)
ej4.19_df %>% filter(year == 1990) %>% count(binary)
ej4.19_df %>% filter(year == 2000) %>% count(binary)
34+29
bayesrules::summarize_beta_binomial(11, 20, 29, 63)
bayesrules::plot_beta_binomial(summarize_beta_binomial(11, 20, 29, 63))
bayesrules::plot_beta_binomial(11, 20, 29, 63)
ej4.19_df %>% filter(year %in% c(1980,1990,2000))
ej4.19_df %>% filter(year %in% c(1980,1990,2000)) %>% count(binary)
53+39
bayesrules::summarize_beta_binomial(1,1,39,92)
